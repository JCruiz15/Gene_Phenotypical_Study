RTCGAToolbox::getFirehoseAnalyzeDates()
RTCGAToolbox::getFirehoseData(dataset = "BRCA", runDate = "20160128", forceDownload = TRUE, RNASeq2Gene = TRUE, clinical = TRUE)
library(RTCGAToolbox)
RTCGAToolbox::getFirehoseAnalyzeDates()
BRCAdata <- RTCGAToolbox::getFirehoseData(dataset = "BRCA", runDate = "20160128", forceDownload = TRUE, RNASeq2Gene = TRUE, clinical = TRUE)
RTCGAToolbox::getFirehoseRunningDates()
RTCGAToolbox::getFirehoseDatasets()
library(RTCGAToolbox)
RTCGAToolbox::getFirehoseAnalyzeDates()
RTCGAToolbox::getFirehoseDatasets()
BRCAdata <- RTCGAToolbox::getFirehoseData(dataset = "BRCA", runDate = "20160128", forceDownload = TRUE, RNASeqGene = TRUE, clinical = TRUE)
library(RTCGAToolbox)
RTCGAToolbox::getFirehoseAnalyzeDates()
RTCGAToolbox::getFirehoseDatasets()
BRCAdata <- RTCGAToolbox::getFirehoseData(dataset = "BRCA", forceDownload = TRUE, RNASeqGene = TRUE, clinical = TRUE)
brcaData <- read.table("20160128-BRCA-Clinical.txt", sep = "\t")
t(brcaData)
brcaData <- data.frame(read.table("20160128-BRCA-Clinical.txt", sep = "\t"))
t(brcaData)
brcaData
brcaData <- data.frame(t(read.table("20160128-BRCA-Clinical.txt", sep = "\t")))
brcaData
```{r}
RTCGAToolbox::getFirehoseAnalyzeDates()
RTCGAToolbox::getFirehoseDatasets()
BRCAdata <- RTCGAToolbox::getFirehoseData(dataset = "BRCA", runDate = "20160128", forceDownload = TRUE, RNASeq2Gene = TRUE, clinical = TRUE)
library(RTCGAToolbox)
brcaData <- data.frame(t(read.table("20160128-BRCA-Clinical.txt", sep = "\t")))
brcaData <- data.frame(t(read.table("20160128-BRCA-Clinical.txt", sep = "\t")))
brcaData
colnames(brcaData) <-
brcaData
colnames(brcaData) <-
brcaData
brcaData
brcaData <- data.frame(t(read.table("20160128-BRCA-Clinical.txt", sep = "\t")))
brcaData
brcaData <- data.frame(t(read.table("20160128-BRCA-Clinical.txt", sep = "\t")))
colnames(brcaData) <- brcaData[1,]
brcaData
brcaData <- brcaData[-1,]
brcaData
brcaData <- data.frame(t(read.table("20160128-BRCA-Clinical.txt", sep = "\t")))
colnames(brcaData) <- brcaData[1,]
brcaData <- brcaData[-1,]
rownames(brcaData) <- brcaData$`Hybridization REF`
brcaData
brcaData <- data.frame(t(read.table("20160128-BRCA-Clinical.txt", sep = "\t")))
colnames(brcaData) <- brcaData[1,]
brcaData <- brcaData[-1,]
rownames(brcaData) <- brcaData$`Hybridization REF`
brcaData <- brcaData[,-1]
brcaData
sum(is.na(brcaData$years_to_birth))
sum(is.na(brcaData[,1:18]))
plot(brcaData$years_to_birth)
barplot(brcaData$years_to_birth)
sum(is.na(brcaData[,1:18]))
l <- list()
for(i in (1:18)) {
append(l, sum(is.na(brcaData[,i])))
}
l
l <- list()
for(i in (1:18)) {
append(l, sum(is.na(brcaData[,i])))
}
l <- c()
for(i in (1:18)) {
append(l, sum(is.na(brcaData[,i])))
}
l
for(i in (1:18)) {
print(sum(is.na(brcaData[,i])))
}
l <- c()
for(i in (1:18)) {
l <- append(l, sum(is.na(brcaData[,i])))
}
l
l <- c()
for(i in (1:18)) {
l <- append(l, sum(is.na(brcaData[,i])))
}
barplot(l)
a <- data.frame(l, colnames=colnames(brcaData))
a
a <- data.frame(l)
a
install.packages("xfun")
library(igraph)
library(linkcomm)
library(dplyr)
library(STRINGdb)
string_db <- STRINGdb$new( version="11", species=9606, score_threshold=400, input_directory="" )
# Have look at the methods defined in the STRINGdb package (i.e. stuff we can do with STRING)
STRINGdb$methods()              # To list all the methods available.
STRINGdb$help("get_graph")      # To visualize their documentation.
string.network <- string_db$get_graph()  # We get a network as an igraph object from STRING. Contains human proteins, filtered by Combined score > 400
## Getting the data
# Load the dataset we want to analyse. The genes are sorted by fdr corrected pvalues and the log fold change of the differential expression is also reported in the table. (See this paper on microarray data expression http://www.nature.com/ng/journal/v32/n4s/pdf/ng1032.pdf)
data(diff_exp_example1)
head(diff_exp_example1)
library(STRINGdb)
string_db <- STRINGdb$new( version="11", species=9606, score_threshold=400, input_directory="" )
string.network <- string_db$get_graph()  # We get a network as an igraph object from STRING. Contains human proteins, filtered by Combined score > 400
## Getting the data
# Load the dataset we want to analyse. The genes are sorted by fdr corrected pvalues and the log fold change of the differential expression is also reported in the table. (See this paper on microarray data expression http://www.nature.com/ng/journal/v32/n4s/pdf/ng1032.pdf)
data(diff_exp_example1)
head(diff_exp_example1)
# Load the dataset we want to analyse. The genes are sorted by fdr corrected pvalues and the log fold change of the differential expression is also reported in the table. (See this paper on microarray data expression http://www.nature.com/ng/journal/v32/n4s/pdf/ng1032.pdf)
data(diff_exp_example1)
library(igraph)
library(linkcomm)
library(dplyr)
library(DT)
DT::datatable(head(diff_exp_example1))
DT::datatable(diff_exp_example1)
first.neigh <- (neighbors(graph = string.network, v = V(hits.network)$name, mode = "all"))$name
## Map Genes to STRING ID
example1_mapped <- string_db$map( diff_exp_example1, "gene", removeUnmappedRows = TRUE )
# We will perform the network analysis for the up-regulated hits.
hits <-(filter(example1_mapped, pvalue <=0.05 & logFC >=1.2))$STRING_id
# STRING network for these selected proteins
hits.network <- string_db$get_subnetwork(hits)
first.neigh <- (neighbors(graph = string.network, v = V(hits.network)$name, mode = "all"))$name
first.neigh <- (neighbors(graph = string.network, v = V(hits.network)$name, mode = "all"))$name
first.neigh
hits.network
first.neigh <- (neighbors(graph = string.network, v = V(hits.network)$name, mode = "all"))$name
hits.network <- string_db$get_subnetwork(unique(c(V(hits.network)$name, first.neigh)))
plot(hits.network,
vertex.color = "tomato",
vertex.size = degree(hits.network)/10,
vertex.label.color = "black",
vertex.label.family = "Helvetica",
vertex.label.cex = 0.5,
layout = layout.kamada.kawai
)
V(hits.network)$name <- ultimos6
first.neigh <- (neighbors(graph = string.network, v = V(hits.network)$name, mode = "all"))$name
hits.network <- string_db$get_subnetwork(unique(c(V(hits.network)$name, first.neigh)))
cl <- components(hits.network)
nodes.to.remove <- names(cl$membership[cl$membership!=1])
# We have only one connected component
hits.network <- delete_vertices(hits.network, nodes.to.remove)
# Para poder incluir el nombre de los genes en las gráficas, estos son recortados y sólo se tendrá los últimos 6 dígitos para así poder diferenciarlos
ultimos6 <- gsub("9606.ENSP00000", "", V(hits.network)$name)
V(hits.network)$name <- ultimos6
plot(hits.network,
vertex.color = "tomato",
vertex.size = degree(hits.network)/10,
vertex.label.color = "black",
vertex.label.family = "Helvetica",
vertex.label.cex = 0.5,
layout = layout.kamada.kawai
)
hits.df <- igraph::as_data_frame(hits.network, what="edges")
hits.network_lc <- getLinkCommunities(hits.df, hcmethod = "single")
print(hits.network_lc)
hits.network_lc
print(hits.network_lc)
# Aplicamos el link communities para generar el dendrograma
hits.network_lc <- getLinkCommunities(hits.df, hcmethod = "single")
# Aplicamos el link communities para generar el dendrograma
hits.network_lc <- getLinkCommunities(hits.df, hcmethod = "single")
print(hits.network_lc)
plot(hits.network_lc, type = "summary")
plot(hits.network_lc, type = "summary")
hits.df <- igraph::as_data_frame(hits.network, what="edges")
# Aplicamos el link communities para generar el dendrograma
hits.network_lc <- getLinkCommunities(hits.df, hcmethod = "single")
plot(hits.network_lc, type = "summary")
hits.df <- igraph::as_data_frame(hits.network, what="edges")
# Aplicamos el link communities para generar el dendrograma
hits.network_lc <- getLinkCommunities(hits.df, hcmethod = "single")
plot(hits.network_lc, type = "summary")
plot(hits.network_lc, type = "graph", layout = layout.fruchterman.reingold, ewidth = 2, vlabel.cex = 0.5)
plot(hits.network_lc, type = "graph", layout = layout.fruchterman.reingold, ewidth = 2, vlabel = FALSE)
plot(hits.network_lc, type = "graph", layout = layout.fruchterman.reingold, ewidth = 2, vlabel = FALSE, layout = layout.fruchterman.reingold())
plot(hits.network_lc, type = "graph", layout = layout.fruchterman.reingold, ewidth = 2, vlabel = FALSE, layout = layout.fruchterman.reingold())
plot(hits.network_lc, type = "graph", layout = layout.fruchterman.reingold, ewidth = 2, vlabel = FALSE, layout=layout.fruchterman.reingold())
plot(hits.network_lc, type = "graph", layout = layout.fruchterman.reingold, ewidth = 2, vlabel = FALSE)
plot(hits.network_lc, type = "members")
hits.network_lc$nodeclusters
hits.network_lc$clusters
hits.network_lc$numclusters
hits.network_lc$directed
nf <- graph.feature(yeast_lc,
type = "nodes",
indices = getNodesIn(yeast_lc,
clusterids = 11,
type = "indices"),
features = 30, default = 5)
nf <- graph.feature(hits.network_lc,
type = "nodes",
indices = getNodesIn(hits.network_lc,
clusterids = 11,
type = "indices"),
features = 30, default = 5)
plot(hits.network_lc,
type = "graph",
vsize = 20,
vshape = "circle",
vlabel = FALSE,
layout = layout.fruchterman.reingold)
nf <- graph.feature(hits.network_lc,
type = "nodes",
indices = getNodesIn(hits.network_lc,
clusterids = 11,
type = "indices"),
features = 30, default = 5)
nf
plot(hits.network_lc,
type = "graph",
vsize = 20,
vshape = "circle",
vlabel = FALSE,
layout = layout.fruchterman.reingold)
plot(hits.network_lc,
type = "member",
vsize = 20,
vshape = "circle",
vlabel = FALSE,
layout = layout.fruchterman.reingold)
plot(hits.network_lc,
type = "members",
vsize = 20,
vshape = "circle",
vlabel = FALSE,
layout = layout.fruchterman.reingold)
plot(hits.network_lc,
type = "members")
hits.network_lc
plot(hits.network_lc,
type = "members")
graph.feature(hits.network_lc,
type = "nodes",
indices = getNodesIn(hits.network_lc,
clusterids = 11,
type = "indices"),
features = 30, default = 5)
hits.network_lc
hits.network_lc$edgelist
hits.network_lc$clustsizes
max(hits.network_lc$clustsizes)
index(hits.network_lc$clustsizes)
getIndex(hits.network_lc$clustsizes)
x %>% { which(. == max(hits.network_lc$clustsizes)) }
hits.network_lc %>% { which(. == max(hits.network_lc$clustsizes)) }
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
STRINGdb$help("get_proteins")
STRINGdb$help(
)
source("~/.active-rstudio-document", echo=TRUE)
genes <- read.csv("C:\Users\juanc\Desktop\genes_for_HP_0030880.csv")
genes <- read.csv("C:/Users/juanc/Desktop/genes_for_HP_0030880.csv")
genes <- read.csv("C:/Users/juanc/Desktop/genes_for_HP_0030880.csv", sep=",")
source("~/.active-rstudio-document", echo=TRUE)
View(genes)
STRINGdb$new(genes$GENE_ENTREZ_ID)
source("~/.active-rstudio-document", echo=TRUE)
STRINGdb$help()
STRINGdb$help("import")
STRINGdb$help()
STRINGdb$help("trace")
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
View(links)
View(nodes)
View(links)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
graph <- igraph::graph_from_data_frame(vertices = nodes, d = links, directed = FALSE)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
View(links)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
View(links)
View(nodes)
nodes <- read.table("C:/Users/juanc/Desktop/string_node_degrees.tsv", header = FALSE)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
df <- read.table("C:\Users\juanc\Desktop\string_interactions.tsv")
df <- read.table("C:/Users/juanc/Desktop/string_interactions.tsv")
View(df)
links <- data.frame(df$V3, df$V4, df$V13)
links
graph <- igraph::graph_from_data_frame(vertices = nodes, d = links, directed = FALSE)
links <- data.frame(df$V3, df$V4)
links
graph <- igraph::graph_from_data_frame(vertices = nodes, d = links, directed = FALSE)
graph
links
nodes
graph <- igraph::graph_from_data_frame(vertices = nodes$V2, d = links, directed = FALSE)
graph
plot(graph)
plot(
graph,
vlabel = FALSE
)
plot(
graph,
v.label = FALSE
)
plot(
graph,
v = FALSE
)
plot(
graph
)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
plot(
graph
)
V(graph)$color = "black"
plot(
graph
)
plot(
graph,
vertex.label = nodes$V1
)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
plot(
graph,
vertex.label = nodes$V1,
vertex.size = 10
vertex.label.color = "black"
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
plot(
graph,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black"
)
source("C:/Users/juanc/Desktop/raynaud_genes.R", echo=TRUE)
graph <- igraph::graph_from_data_frame(vertices = nodes$V2, d = links, directed = FALSE)
plot(
graph,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = igraph::layout.fruchterman.reingold()
)
graph <- igraph::graph_from_data_frame(vertices = nodes$V2, d = links, directed = FALSE)
plot(
graph,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = igraph::layout.fruchterman.reingold()
)
g <- igraph::graph_from_data_frame(vertices = nodes$V2, d = links, directed = FALSE)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = igraph::layout.fruchterman.reingold()
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.circle()
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.auto()
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.auto(g)
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.fruchterman.reingold(g)
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.grid(g)
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.circle(g)
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.bipartite(g)
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.davidson.harel(g)
)
plot(
g,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.auto(g)
)
View(df)
xd <- string_db$map(nodes$V1)
string_db <- STRINGdb$new(version="11", species=9606)
nodes <- read.table("string_node_degrees.tsv", header = FALSE)
df <- read.table("string_interactions.tsv")
links <- data.frame(df$V3, df$V4)
setwd("C:/Users/juanc/Desktop/Año4/BiologiaSistemas/Gene_Phenotipycal_Study/code")
string_db <- STRINGdb$new(version="11", species=9606)
library(STRINGdb)
library(igraph)
library(linkcomm)
string_db <- STRINGdb$new(version="11", species=9606)
nodes <- read.table("string_node_degrees.tsv", header = FALSE)
df <- read.table("string_interactions.tsv")
links <- data.frame(df$V3, df$V4)
xd <- string_db$map(nodes$V1)
xd <- string_db$map(nodes)
xd <- string_db$map(my_data_frame = nodes, my_data_frame_id_col_names = "V1")
genes <- read.csv("genes_for_HP_0030880.csv", sep=";")
View(genes)
genes_entrez <- string_db$map(my_data_frame = genes, my_data_frame_id_col_names = "GENE_SYMBOL")
View(genes_entrez)
string_db$get_graph(genes_entrez)
string_db$get_graph()
View(brcaData)
hits.network <- string_db$get_subnetwork(genes_entrez$STRING_id)
plot(
hits.network,
vertex.label = nodes$V1,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.auto(g)
)
genes_entrez <- string_db$map(my_data_frame = genes, my_data_frame_id_col_names = "GENE_SYMBOL")
hits.network <- string_db$get_subnetwork(genes_entrez$STRING_id)
source("C:/Users/juanc/Desktop/Año4/BiologiaSistemas/Gene_Phenotipycal_Study/code/raynaud_genes.R", echo=TRUE)
plot(
hits.network,
vertex.label = genes_entrez$GENE_SYMBOL,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.auto(g)
)
plot(
hits.network,
vertex.label = genes_entrez$GENE_SYMBOL,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.auto(hits.network)
)
plot(
hits.network,
vertex.label = genes_entrez$GENE_SYMBOL,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.auto(hits.network)
)
first.neigh <- (neighbors(graph = g, v = V(hits.network)$name, mode = "all"))$name
hits.network <- string_db$get_subnetwork(unique(c(V(hits.network)$name, first.neigh)))
hits.df <- igraph::as_data_frame(hits.network, what="edges")
p <- plot(
hits.network,
vertex.label = genes_entrez$GENE_SYMBOL,
vertex.size = 10,
vertex.label.color = "black",
layout = layout.auto(hits.network)
)
first.neigh <- (neighbors(graph = p, v = V(hits.network)$name, mode = "all"))$name
string.network <- string_db$get_graph()
first.neigh <- (neighbors(graph = string.network, v = V(hits.network)$name, mode = "all"))$name
hits.network <- string_db$get_subnetwork(unique(c(V(hits.network)$name, first.neigh)))
hits.df <- igraph::as_data_frame(hits.network, what="edges")
hits.network_lc <- getLinkCommunities(hits.df, hcmethod = "average")
plot(hits.network_lc, type = "members")
plot(hits.network_lc, type = "graph", layout = layout.fruchterman.reingold, ewidth = 2, vlabel = FALSE)
plot(hits.network_lc, type= "graph")
plot(hits.network_lc, type= "summary")
source("C:/Users/juanc/Desktop/Año4/BiologiaSistemas/Gene_Phenotipycal_Study/code/raynaud_genes.R", echo=TRUE)
